# Notes for future

[!] As a principle, operations that act on values on the top of the stack should *consume* those values. That is, they should not be able to see a value they have not popped, as this leads to weird, non-intuitive bugs.
Exceptions here are ones that copy parts of memory.


- Rename MSM to CSM (copy stack to memory)

- Memory bank support
- C-like language that can be used to write code for the VirtualMachineConsole
- 8 bit opcodes / unaligned data in binary
  - Example: 0xff01 0xffff -> PUSH 0xffff, HALT





# Plan for graphics

- Execute game code until it's time to draw a frame
- Pause game code, saving the ip
- Begin drawing background and then sprites, based on the objects in a particular region of memory
- Begin drawing background and then foreground
  - Both are combinations of tiles
- The screen should be made up of 256x256 pixels, which is 32x32 tiles (8x8 pixels each)
- A fixed, linear region of memory that strides of 32 bits (pointer to tile, pointer to palette entry)
  - One for background :: 2048 bytes
  - One for foreground :: 2048 bytes
- Continuous video memory is 4096 bytes (4kb)

Total memory: 64kb

Video memory:  4kb
Input memory:  ~5b


0xffffff00

- Objects are structures that describe
  - The palette of the sprite
  - It's position

















A +-----------------+ 0x0000
  |                 |
  |      Data       |
  |                 |
B +-----------------+ 0x5555
  |                 |
  |  Program Code   |
  |                 |
C +-----------------+ 0xAAAA
  |                 |
  |      Stack      |
  |                 |
D +-----------------+ 0xFFFF

A - Always 0x0000
B - Dependent on amount of statically assigned Data
C - Soft/hard cutoff point
D - Always 0xFFFF