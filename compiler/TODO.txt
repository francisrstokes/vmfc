# Higher level language for assembler


Feature                     Parsing     Generating
--------------------------------------------------
Assignments                 [x]         [x]
Arithmetic operations       [x]         [x]
Function Definitions        [x]         [x]
Reassignments               [x]         [x]
While loops                 [x]         [x]
Function calls              [x]         [x]
If/Else Blocks              [x]         [x]
Arrays/Buffers              [x]         [x]
General Return Statements   [x]         [x]
Rest of the operations      [x]         [x]
Single Line Comments        [ ]         [ ]
Multi Line Comments         [ ]         [ ]
End of line comment         [ ]         [ ]
Section Definitions         [ ]         [ ]
Structures                  [ ]         [ ]
Macro calls                 [ ]         [ ]
Whole Program               [ ]         [ ]


struct someStruct {
  x;
  y[4];
  z[10];
}


fn someFn(a, b, c, d) {
  var x = 0x2; // A push
  var y = ((a + b) + x);
  y = d + y;

  var mem = %read(address);
  %write(expr, addressExpr);

  #memCpy(from, amount, to);

  #label('labelName')

  return c;
}

someFn(0x02, 0x04, [dataAddress], {label});

// Sections use datalines but they can be spread over multiple lines
section aSectionName [0x3000] {
  anotherName words 0x0001, 0x0002, 0x0005,
                    0x4444;
}

// Reserves `size` * 2 bytes on the stack
var name[size] = [x, y, z];


// Writes to `frame offset of name + 3 * 2`
name[3] = 0x04;
// When the index is a literal generator can use CSP / SMV
// When the index is an expr, generator can use CSOP / SMVO

// Get the address of a variable into the stack
var addressOfName = &name;


- Basically a small macro language
- Expose some handy things:
  - Function declaration and calling facilities
  - some built in functions for reading/copying memory
    - for creating labels
    - inline asm
  - Macro calls - which differ from function calls only in that they correspond directly to some kind of
    assembly to be directly injected at the current spot
      - Can be used for labels or for descriptive direct mappings to instructions
      - Should contrast function calls in that a function call should always generate assembly that
        creates a stack frame, pushes arguments and arg length etc
- "Module" system - basic importing of code - basically how C includes work 